# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these
#    https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux)):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - ACR_RESOURCE_GROUP (resource group of your ACR)
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - CLUSTER_RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - DOCKER_FILE (path to your Dockerfile)
#    - BUILD_CONTEXT_PATH (path to the context of your Dockerfile)
#    - CHART_PATH (path to your helm chart)
#    - CHART_OVERRIDE_PATH (path to your helm chart with override values)
#    - CHART_OVERRIDES (override values for your helm chart)
#    - NAMESPACE (namespace to deploy your application)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: nix-foundation

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  ACR_RESOURCE_GROUP: ODL-sandbox-06-1505576
  AZURE_CONTAINER_REGISTRY: yatin
  CONTAINER_NAME: nix-foundation
  CLUSTER_RESOURCE_GROUP: ODL-sandbox-06-1505576
  CLUSTER_NAME: yatin-aks-wiz
  DOCKER_FILE: ./Dockerfile
  BUILD_CONTEXT_PATH: ./
  CHART_PATH: ./helm/nix-foundation
  CHART_OVERRIDE_PATH: ./helm/nix-foundation/values.yaml
  CHART_OVERRIDES: image.repository=yatin.azurecr.io/nix-foundation,image.tag=${{ github.sha }}
  NAMESPACE: namespace-workflow-1731073693703
  IMAGE_REPO: yatin.azurecr.io/samples/nix-foundation
  IMAGE_TAG: ${{ github.sha }}
jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Build the Docker image
        run: cd ${{ env.BUILD_CONTEXT_PATH }} && docker build . --tag ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} 
      
      - name: Download Wiz CLI
        run: curl -o wizcli https://wizcli.app.wiz.io/latest/wizcli && chmod +x wizcli

      - name: Authenticate to Wiz
        run: sudo -E ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      - name: Run Wiz CLI image scan
        id: scan
        run: |-
          sudo -E ./wizcli docker scan -i ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} --policy-hits-only --driver mountWithLayers \
          --dockerfile "./Dockerfile" --output wiz-output.json,sarif,true --tag github_action_run_id=${{ github.run_id }} \
          --sbom-format spdx-json --sbom-output-file sbom.json
        continue-on-error: true

      - name: Push docker image
        run: docker push ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
        
      - name: Run Wiz CLI image tag
        run: sudo -E ./wizcli docker tag -i ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Checks if the AKS cluster is private
      - name: Is private cluster
        id: isPrivate
        run: |
          result=$(az aks show --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --query "apiServerAccessProfile.enablePrivateCluster")
          echo "PRIVATE_CLUSTER=$result" >> "$GITHUB_OUTPUT"

      # Deploys application
      - name: Deploy application on private cluster
        if : steps.isPrivate.outputs.PRIVATE_CLUSTER == 'true'
        run: |
          command_id=$(az aks command invoke --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --command "helm upgrade --wait -i -f ${{ env.CHART_OVERRIDE_PATH }} --set ${{ env.CHART_OVERRIDES }} --set image.tag=${{ github.sha }} automated-deployment ${{ env.CHART_PATH }} --namespace ${{ env.NAMESPACE }} --create-namespace --timeout 240s" --file . --query id -o tsv)
          result=$(az aks command result --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --command-id $command_id)
          echo "Helm upgrade result: $result"
          exitCode=$(az aks command result --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --command-id $command_id --query exitCode -o tsv)
          
          if [ $exitCode -ne 0 ]; then
            exit $exitCode
          fi

      - name: Deploy application on public cluster
        if : steps.isPrivate.outputs.PRIVATE_CLUSTER != 'true'
        run: helm upgrade --wait -i -f ${{ env.CHART_OVERRIDE_PATH }} --set ${{ env.CHART_OVERRIDES }} --set image.tag=${{ github.sha }} automated-deployment ${{ env.CHART_PATH }} --namespace ${{ env.NAMESPACE }} --create-namespace

